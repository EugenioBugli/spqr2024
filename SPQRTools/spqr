#! /bin/bash

spqr() 
{

compile() 
{
  SIMROBOT=false
  SCENE=""
  HELPS="
Usage: spqr compile [--simrobot] [--scene <global scene path>]
Flags:
  --simrobot (optional): to launch SimRobot after compilation
  --scene (optional): the global path of the scene you want to run in SimRobot (example: ./Config/Scenes/DescriptionFiles/Fast/1vs1/[Fast]1vs1.ros2)
"

  while [[ "$#" -gt 0 ]]; do
    case $1 in
      --simrobot) SIMROBOT=true ;;
      --scene) SCENE="$2"; shift ;;
      --help|-h) 
          echo $HELPS; 
          exit(0) ;;
      *) 
      echo "Unknown parameter passed: $1\n$HELPS"; return 1 ;;
    esac
    shift
  done

  CURRENT_DIR=$(pwd)
  REPOSITORY_ROOT=$(git rev-parse --show-toplevel)
  cd $REPOSITORY_ROOT

  touch ./Make/CMake/Nao.cmake

  CURRENT_GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
  echo "Current branch $CURRENT_GIT_BRANCH\n"

  echo "----------------- Generating ------------------"
  NO_CLION=true ./Make/Linux/generate
  echo -e "\n------------------ Compiling ------------------"
  ./Make/Linux/compile 

  if [ "$SIMROBOT" = true ]; then
    echo -e "\n---- Launching SimRobot -----" 
    ./Build/Linux/SimRobot/Develop/SimRobot $SCENE
  fi

  cd $CURRENT_DIR
}

deploy_from_formation()
{
  # Read robot formation
  declare -a formation
  while IFS= read -r line || [[ -n "$line" ]]; do
    number=$(echo "$line" | cut -d' ' -f1)
    ip=$(echo "$line" | cut -d' ' -f2)
    name=$(echo "$line" | cut -d' ' -f3)
    declare -A entry=([number]=$number [ip]=$ip [name]=$name)
    formation+=("$(declare -p entry)")
  done < ./SPQRTools/robotFormation.conf

  echo "Current formation: "
  for item in "${formation[@]}"; do
    eval "$item"
    echo " - Number: ${entry[number]} - Ip: ${entry[ip]} - Name: ${entry[name]}"
  done
  echo ""

  # Read deploy config
  declare -a config
  while IFS= read -r line || [[ -n "$line" ]]; do
    clean_line=$(echo "$line" | sed 's/#.*//')
    [[ -z "$clean_line" ]] && continue
    key=$(echo "$clean_line" | cut -d' ' -f1)
    value=$(echo "$clean_line" | cut -d' ' -f2-)
    value=$(echo $value | xargs)
    declare -A entry=([key]=$key [value]=$value)
    config+=("$(declare -p entry)")
  done < ./SPQRTools/deploySettings.conf

  echo "Current deploy settings: "
  for item in "${config[@]}"; do
    eval "$item"
    echo " - ${entry[key]} = ${entry[value]}"
  done
  echo ""

  # Setup deploy command
  MODE="Develop"
  NETWORK="WiFi"
  RESTART_BHUMAN="true"
  COLOR="red"
  VOLUME="50"
  REMOVE_LOGS="false"

  for item in "${config[@]}"; do
    eval "$item"
    case $entry[key] in
      mode) MODE="${entry[value]}" ;;
      network) NETWORK="${entry[value]}" ;;
      -c) COLOR="${entry[value]}" ;;  
      -v) VOLUME="${entry[value]}" ;;
      -b) RESTART_BHUMAN="${entry[value]}" ;;
      -d) REMOVE_LOGS="${entry[value]}" ;;
    esac
  done

  DEPLOY_COMMAND="${MODE}" 
  for item in "${formation[@]}"; do
    eval "$item"    
    if [ ${entry[ip]} = "00" ]; then
      continue
    fi

    if [ $NETWORK = "WiFi" ]; then
      IP_BASE="10.0.19."
    elif [ $NETWORK = "Ethernet" ]; then
      IP_BASE="192.168.19."
    else
      echo "Unknown network: $NETWORK"
      exit(1)
    fi
    DEPLOY_COMMAND="$DEPLOY_COMMAND -r ${entry[number]} ${IP_BASE}${entry[ip]}"
  
  done
  
  DEPLOY_COMMAND="$DEPLOY_COMMAND -c ${COLOR} -v ${VOLUME}"
  if [ $RESTART_BHUMAN = "true" ]; then
    DEPLOY_COMMAND="$DEPLOY_COMMAND -b"
  fi
  if [ $REMOVE_LOGS = "true" ]; then
    DEPLOY_COMMAND="$DEPLOY_COMMAND -d"
  fi

  eval ./Make/Linux/deploy $DEPLOY_COMMAND "$@"
}

deploy()
{ 
  CURRENT_DIR=$(pwd)
  REPOSITORY_ROOT=$(git rev-parse --show-toplevel)
  cd $REPOSITORY_ROOT

  CURRENT_GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
  echo "Current branch $CURRENT_GIT_BRANCH\n"

  #* Help message
  if [[ -z "$1" || "$1" = "--help" || "$1" = "-h" ]]; then
    ./Make/Linux/deploy -h

  #* Deploy from formation and settings files
  elif [[ "$1" = "--formation" || "$1" = "-f" ]]; then
    deploy_from_formation "${@:2}"

  #* Deploy with custom settings
  else
    ./Make/Linux/deploy "$@" 
  fi

  cd $CURRENT_DIR
}

simrobot()
{
  CURRENT_DIR=$(pwd)
  REPOSITORY_ROOT=$(git rev-parse --show-toplevel)
  cd $REPOSITORY_ROOT

  HELPS="
Usage: spqr simrobot [--scene <global scene path>]
Flags:
  -s|--scene (optional): the global path of the scene you want to run in SimRobot (example: ./Config/Scenes/DescriptionFiles/Fast/1vs1/[Fast]1vs1.ros2)
"
  if [[ "$1" = "--help" || "$1" = "-h" ]]; then
    echo $HELPS
    return
  fi

  SCENE=$1
  echo "Launching SimRobot"
  echo "Scene: $SCENE"
  ./Build/Linux/SimRobot/Develop/SimRobot $SCENE

  cd $CURRENT_DIR
}

if [ "$1" = "compile" ]; then
  compile "${@:2}"
elif [ "$1" = "deploy" ]; then
  deploy "${@:2}" 
elif [ "$1" = "simrobot" ]; then
  simrobot "${@:2}"
elif [[ "$1" = "--help" || "$1" = "-h" ]]; then
  echo "Usage: "
  echo "  spqr compile"
  echo "  spqr deploy"
  echo "  spqr simrobot"
else
  echo "Unknown command: $1"
fi

unset -f compile
unset -f deploy_from_formation
unset -f deploy
unset -f simrobot
}